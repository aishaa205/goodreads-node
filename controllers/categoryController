const Category = require("../models/category");

// Utility function to send a standardized response
const sendResponse = (res, status, data = null, validationMessage = null) => {
  res.status(status).json({
    status: status === 200 || status === 201 ? "success" : "error",
    data,
    validationMessage,
  });
};

// Get all categories
exports.getCategories = async (req, res) => {
  try {
    const categories = await Category.find();
    sendResponse(res, 200, categories);
  } catch (error) {
    sendResponse(res, 500, null, "Failed to fetch categories.");
  }
};



// Create a new category
exports.createCategory = async (req, res) => {
  try {
    const category = await Category.create(req.body);
    sendResponse(res, 201, category, "Category created successfully.");
  } catch (error) {
    sendResponse(res, 400, null, "Failed to create category.");
  }
};

// Get a single category by ID
exports.getCategory = async (req, res) => {
  try {
    const category = await Category.findById(req.params.id);
    if (!category) {
      return sendResponse(res, 404, null, "Category not found.");
    }
    sendResponse(res, 200, category);
  } catch (error) {
    sendResponse(res, 500, null, "Failed to fetch the category.");
  }
};

// Update a category by ID
exports.updateCategory = async (req, res) => {
  try {
    const category = await Category.findByIdAndUpdate(req.params.id, req.body, {
      new: true,
    });
    if (!category) {
      return sendResponse(res, 404, null, "Category not found.");
    }
    sendResponse(res, 200, category, "Category updated successfully.");
  } catch (error) {
    sendResponse(res, 400, null, "Failed to update category.");
  }
};

// Delete a category by ID
exports.deleteCategory = async (req, res) => {
  try {
    const category = await Category.findByIdAndDelete(req.params.id);
    if (!category) {
      return sendResponse(res, 404, null, "Category not found.");
    }
    sendResponse(res, 200, category, "Category deleted successfully.");
  } catch (error) {
    sendResponse(res, 500, null, "Failed to delete category.");
  }
};

// Search for categories by name
exports.searchCategories = async (req, res) => {
  try {
    const { name } = req.query;
    const categories = await Category.find({
      name: { $regex: name, $options: "i" },
    });
    if (categories.length === 0) {
      return sendResponse(res, 404, null, "No categories found.");
    }
    sendResponse(res, 200, categories);
  } catch (error) {
    sendResponse(res, 500, null, "Failed to search categories.");
  }
};


// Get all categories with pagination and filtering
exports.getCategoriesWithPagination = async (req, res) => {
    try {
      const { page = 1, limit = 10 } = req.query;
      const skip = (page - 1) * limit;
      const categories = await Category.find().skip(skip).limit(Number(limit));
      const total = await Category.countDocuments();
  
      sendResponse(res, 200, {
        categories,
        pagination: {
          total,
          page: Number(page),
          limit: Number(limit),
          totalPages: Math.ceil(total / limit),
        },
      });
    } catch (error) {
      sendResponse(res, 500, null, "Failed to fetch categories with pagination.");
    }
  };